import telebot
from telebot import types
import requests

# –¢–≤–æ–π —Ç–æ–∫–µ–Ω –±–æ—Ç–∞
TOKEN = "8166268833:AAGwIkGiD0RtaVCEWWTUMbEvzqW8pM4RgTA"
# –¢–≤–æ–π –∫–∞–Ω–∞–ª
CHANNEL_USERNAME = "RTFKTxNIKEnft"

bot = telebot.TeleBot(TOKEN)

# –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏
def check_subscription(user_id):
    try:
        response = requests.get(f"https://api.telegram.org/bot{TOKEN}/getChatMember?chat_id=@{CHANNEL_USERNAME}&user_id={user_id}")
        result = response.json()
        status = result.get("result", {}).get("status", "")

        return status in ["member", "administrator", "creator"]
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ–¥–ø–∏—Å–∫–∏: {e}")
        return False

# –ö–æ–º–∞–Ω–¥–∞ /start
@bot.message_handler(commands=['start'])
def send_welcome(message):
    user_id = message.from_user.id
    subscribed = check_subscription(user_id)

    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    
    if not subscribed:
        # –ï—Å–ª–∏ –ù–ï –ø–æ–¥–ø–∏—Å–∞–Ω ‚Äì –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É "–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è"
        subscribe_button = types.KeyboardButton("üî• –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª")
        markup.add(subscribe_button)
        bot.send_message(
            message.chat.id,
            "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –ß—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å, –ø–æ–¥–ø–∏—à–∏—Å—å –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª:\n\n"
            f"üëâ [–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è](https://t.me/{CHANNEL_USERNAME})",
            parse_mode="Markdown",
            reply_markup=markup
        )
    else:
        # –ï—Å–ª–∏ –ø–æ–¥–ø–∏—Å–∞–Ω ‚Äì —Å–∫—Ä—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–ª–µ–¥—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        bot.send_message(
            message.chat.id,
            "‚úÖ –û—Ç–ª–∏—á–Ω–æ! –¢—ã –ø–æ–¥–ø–∏—Å–∞–ª—Å—è! –¢–µ–ø–µ—Ä—å –º–æ–∂–µ—à—å –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å.",
            reply_markup=types.ReplyKeyboardRemove()
        )
        # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –¥—Ä—É–≥—É—é –∫–Ω–æ–ø–∫—É (–Ω–∞–ø—Ä–∏–º–µ—Ä, "–ü–µ—Ä–µ–π—Ç–∏ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ")
        start_button = types.InlineKeyboardMarkup()
        start_button.add(types.InlineKeyboardButton("üöÄ –í–æ–π—Ç–∏ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ", web_app=types.WebAppInfo(url="https://vercel.com/roriks-projects-9f1743db/nikegiveaway")))
        bot.send_message(message.chat.id, "–ù–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –≤–æ–π—Ç–∏ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ:", reply_markup=start_button)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª"
@bot.message_handler(func=lambda message: message.text == "üî• –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª")
def subscribe_check(message):
    user_id = message.from_user.id
    subscribed = check_subscription(user_id)

    if subscribed:
        bot.send_message(
            message.chat.id,
            "‚úÖ –¢—ã –ø–æ–¥–ø–∏—Å–∞–ª—Å—è! –¢–µ–ø–µ—Ä—å –º–æ–∂–µ—à—å –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å.",
            reply_markup=types.ReplyKeyboardRemove()
        )
        # –ü–æ—Å–ª–µ –ø–æ–¥–ø–∏—Å–∫–∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –≤—Ö–æ–¥–∞
        start_button = types.InlineKeyboardMarkup()
        start_button.add(types.InlineKeyboardButton("üöÄ –í–æ–π—Ç–∏ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ", web_app=types.WebAppInfo(url="https://vercel.com/roriks-projects-9f1743db/nikegiveaway")))
        bot.send_message(message.chat.id, "–ù–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –≤–æ–π—Ç–∏ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ:", reply_markup=start_button)
    else:
        bot.send_message(
            message.chat.id,
            "‚ùå –¢—ã –µ—â—ë –Ω–µ –ø–æ–¥–ø–∏—Å–∞–ª—Å—è! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–ø–∏—à–∏—Å—å –∏ –Ω–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É —Å–Ω–æ–≤–∞.",
            parse_mode="Markdown"
        )

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
bot.polling(none_stop=True)

